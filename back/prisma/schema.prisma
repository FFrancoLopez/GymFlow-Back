// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER_MEMBER
  USER_TRAINING
  USER_ADMIN
}

enum MemberShipType {
  BASIC
  PREMIUM
  DIAMONT
}

model Users {
  id              String   @id @default(uuid())
  nameAndLastName String
  email           String   @unique
  password        String
  bDate           DateTime
  address         String
  phone           String   @unique

  role UserRole @default(USER_MEMBER)

  approved Boolean @default(false)

  member Member?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id     String @id @default(uuid())
  userId String @unique

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  memberShipType MemberShipType

  startDate DateTime @default(now())
  endDate   DateTime

  payment Payment[]
  appointments    Appointment[]  // Relaci√≥n con Appointment

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id       String @id @default(uuid())
  memberId String

  member Member @relation(fields: [memberId], references: [id])

  amount      Float
  PaymentDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Appointment {
  id        String   @id @default(uuid())
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  date      DateTime
  status    String   @default("PENDING") // Estado de la cita (ej: PENDING, CONFIRMED, CANCELED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}