// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER_MEMBER
  USER_TRAINING
  USER_ADMIN
  USER_BASIC
  USER_PREMIUM
  USER_DIAMOND
}

enum MemberShipType {
  BASIC
  PREMIUM
  DIAMOND
}

enum DayOfWeek {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO
}

enum Musclues {
  PECHO
  ESPALDA
  BICEPS
  TRICEPS
  HOMBROS
  CORE
  CARDIO
  BRAZOS_INFERIORES
  BRAZOS_SUPERIORES
  PIERNAS_INFERIORES
  PIERNAS_SUPERIORES
  CUELLO  
  CINTURA
}

model Users {
  id                String   @id @default(uuid())
  nameAndLastName   String
  dni               String   @unique
  email             String   @unique
  password          String
  bDate             DateTime
  address           String
  phone             String   @unique

  role UserRole @default(USER_MEMBER)

  approved Boolean @default(false)

  member Member?

  routines Routine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id     String @id @default(uuid())
  userId String @unique

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  memberShipType MemberShipType
  isActive       Boolean        @default(false)

  startDate DateTime @default(now())
  endDate   DateTime

  payments     Payment[]
  appointments Appointment[] // Relaci√≥n con Appointment

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id       String @id @default(uuid())
  memberId String

  member Member @relation(fields: [memberId], references: [id])

  amount      Float
  status      String   @default("PENDING")
  PaymentDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Room {
  id        String   @id @default(uuid())
  name      String   @unique
  capacity  Int      @default(20)
  appointments Appointment[]
  isDeleted Boolean @default(false)
}

model Appointment {
  id       String @id @default(uuid())
  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  roomId   String
  room     Room @relation(fields: [roomId], references: [id])

  date String
  time String

  status String @default("ACTIVED") // Estado de la cita (ej: PENDING, CONFIRMED, CANCELED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exercise {
  id       String            @id @default(uuid())
  name     String            @unique
  musclue  Musclues
  gifUrl   String?
  instructions String[]      @default([])
  routines RoutineExercise[]
  isDeleted Boolean @default(false)
}

model Routine {
  id       String            @id @default(uuid())
  day      DayOfWeek
  user     Users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  routines RoutineExercise[]
  isDeleted Boolean @default(false)
}

model RoutineExercise {
  id String @id @default(uuid())

  routine   Routine @relation(fields: [routineId], references: [id])
  routineId String

  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId  String
  series      Int
  repetitions Int
  isDeleted Boolean @default(false)
}
model EmailLog {
  id         String   @id @default(uuid()) 
  to         String
  subject    String
  content    String
  eventType  String? 
  messageId  String?  
  sentAt     DateTime @default(now())
}